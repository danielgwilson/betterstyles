{"version":3,"sources":["components/StyleCard.tsx","App.tsx","scripts.ts","serviceWorker.ts","index.tsx"],"names":["styles","createStyles","card","minWidth","marginBottom","bullet","display","margin","transform","title","fontSize","pos","stylePropsContainer","padding","properties","name","fontFamily","expand","marginLeft","expandOpen","actions","StyleCard","_this$props","this","props","classes","styleProps","onClick","styleString","_arr","Object","entries","_i","length","_ref3","_ref2","slicedToArray","key","value","concat","slice","react_default","a","createElement","Card_default","className","CardActionArea_default","CardContent_default","Typography_default","style","CardActions_default","disableActionSpacing","color","IconButton_default","ExpandMore_default","React","Component","withStyles","App","styleCardsJSX","fontWeight","fontStyle","map","styleCard","index","components_StyleCard","Word","run","context","selectedRange","document","getSelection","paragraphs","font","set","size","sync","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","Boolean","window","location","hostname","match","Office","initialize","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4f9153e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\r\nimport createStyles from \"@material-ui/core/styles/createStyles\";\r\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport \"typeface-roboto\";\r\n\r\nconst styles = createStyles({\r\n    card: {\r\n        minWidth: 275,\r\n        marginBottom: 8\r\n    },\r\n    bullet: {\r\n        display: \"inline-block\",\r\n        margin: \"0 2px\",\r\n        transform: \"scale(0.8)\"\r\n    },\r\n    title: {\r\n        fontSize: 14\r\n    },\r\n    pos: {\r\n        marginBottom: 12\r\n    },\r\n    stylePropsContainer: {\r\n        padding: \"12px 8px 8px 12px\"\r\n    },\r\n    properties: {\r\n        fontSize: 10\r\n    },\r\n    name: {\r\n        fontSize: \"11pt\",\r\n        fontFamily: \"Calibri\"\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\"\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    actions: {\r\n        display: \"flex\"\r\n    }\r\n});\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n    name: string;\r\n    styleProps: any;\r\n    onClick: any;\r\n}\r\n\r\ntype State = {\r\n    expanded: boolean;\r\n};\r\n\r\nclass StyleCard extends React.Component<Props, any> {\r\n    render() {\r\n        const { classes, name, styleProps, onClick } = this.props;\r\n\r\n        // generate style overrides string from properties\r\n        let styleString = \"\";\r\n        for (const [key, value] of Object.entries(styleProps)) {\r\n            styleString = `${styleString} ${key}: ${value}, `;\r\n        }\r\n        // remove trailing comma and space\r\n        styleString = `${styleString.slice(0, -2)}`;\r\n\r\n        return (\r\n            <Card className={classes.card}>\r\n                <CardActionArea onClick={onClick}>\r\n                    <CardContent>\r\n                        <Typography className={classes.name} style={styleProps}>\r\n                            {name}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions className={classes.actions} disableActionSpacing>\r\n                    <div className={classes.stylePropsContainer}>\r\n                        <Typography\r\n                            className={classes.properties}\r\n                            color=\"textSecondary\"\r\n                        >\r\n                            {styleString}\r\n                        </Typography>\r\n                    </div>\r\n                    <IconButton className={classes.expand}>\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default withStyles(styles)(StyleCard);\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport StyleCard from \"./components/StyleCard\";\r\nimport { applyStyle } from \"./scripts\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        const styleCards = [\r\n            {\r\n                name: \"normal\",\r\n                styleProps: { fontSize: 11, fontFamily: \"roboto\" }\r\n            },\r\n            {\r\n                name: \"header\",\r\n                styleProps: { fontSize: 24, fontFamily: \"roboto\" }\r\n            },\r\n            {\r\n                name: \"subheader\",\r\n                styleProps: { fontSize: 18, fontFamily: \"roboto\" }\r\n            },\r\n            {\r\n                name: \"bold\",\r\n                styleProps: {\r\n                    fontSize: 11,\r\n                    fontFamily: \"roboto\",\r\n                    fontWeight: \"bold\"\r\n                }\r\n            },\r\n            {\r\n                name: \"italic\",\r\n                styleProps: {\r\n                    fontSize: 11,\r\n                    fontFamily: \"roboto\",\r\n                    fontStyle: \"italic\"\r\n                }\r\n            }\r\n        ];\r\n        const styleCardsJSX = styleCards.map(function(styleCard, index) {\r\n            return (\r\n                <StyleCard\r\n                    key={index}\r\n                    name={styleCard.name}\r\n                    styleProps={styleCard.styleProps}\r\n                    onClick={function() {\r\n                        return applyStyle(styleCard.styleProps);\r\n                    }}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-body\">{styleCardsJSX}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","export function applyStyle(style: any) {\r\n    Word.run(function(context) {\r\n        const doc = context.document;\r\n        let selectedRange: any = doc.getSelection();\r\n        const selectedParagraphs = selectedRange.paragraphs;\r\n\r\n        // if (selectedParagraphs.items.length == 1) {\r\n        //     selectedRange = selectedParagraphs.getFirst();\r\n        // }\r\n\r\n        selectedRange.font.set({\r\n            name: style.fontFamily,\r\n            size: style.fontSize\r\n        });\r\n\r\n        return context.sync();\r\n    }).catch(function(error) {\r\n        console.log(\"Error: \" + error);\r\n        if (error instanceof OfficeExtension.Error) {\r\n            console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\r\n        }\r\n    });\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nlet isOfficeInitialized = false;\r\n\r\nOffice.initialize = () => {\r\n    isOfficeInitialized = true;\r\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n};\r\n\r\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}