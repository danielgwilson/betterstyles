{"version":3,"sources":["components/StyleCard.tsx","withRoot.tsx","App.tsx","scripts.ts","serviceWorker.ts","index.tsx"],"names":["StyleCard","state","expanded","handleExpandClick","_this","setState","_this$props","this","props","classes","name","styleProps","onClick","styleString","_arr","Object","entries","_i","length","_ref3","_ref2","slicedToArray","key","value","concat","slice","react_default","a","createElement","index_es","className","card","cardMainDiv","style","properties","color","classNames","expand","defineProperty","expandOpen","ExpandMore_default","in","timeout","unmountOnExit","React","Component","withStyles","theme","createStyles","minWidth","marginBottom","display","bullet","margin","transform","title","fontSize","pos","stylePropsContainer","padding","fontFamily","top","transition","transitions","create","duration","shortest","breakpoints","up","marginRight","actions","createMuiTheme","palette","typography","withRoot","react","core_styles","CssBaseline_default","styleCardsJSX","fontWeight","fontStyle","map","styleCard","index","components_StyleCard","Word","run","context","doc","document","target","selectedRange","getSelection","load","sync","then","isEmpty","firstParagraph","paragraphs","getFirst","font","set","size","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","Boolean","window","location","hostname","match","Office","initialize","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.491326e6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Theme, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport classNames from \"classnames\";\r\nimport \"typeface-roboto\";\r\n\r\nimport {\r\n    Card,\r\n    CardActionArea,\r\n    CardContent,\r\n    Collapse,\r\n    IconButton,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst styles = (theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            minWidth: 275,\r\n            marginBottom: 8\r\n        },\r\n        cardMainDiv: {\r\n            display: \"flex\"\r\n        },\r\n        bullet: {\r\n            display: \"inline-block\",\r\n            margin: \"0 2px\",\r\n            transform: \"scale(0.8)\"\r\n        },\r\n        title: {\r\n            fontSize: 14\r\n        },\r\n        pos: {\r\n            marginBottom: 12\r\n        },\r\n        stylePropsContainer: {\r\n            padding: \"12px 8px 8px 12px\"\r\n        },\r\n        properties: {\r\n            fontSize: 10\r\n        },\r\n        name: {\r\n            fontSize: \"11pt\",\r\n            fontFamily: \"Calibri\"\r\n        },\r\n        expand: {\r\n            transform: \"rotate(0deg)\",\r\n            top: \"50%\",\r\n            margin: \"auto\",\r\n            transition: theme.transitions.create(\"transform\", {\r\n                duration: theme.transitions.duration.shortest\r\n            }),\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                marginRight: -8\r\n            }\r\n        },\r\n        expandOpen: {\r\n            transform: \"rotate(180deg)\"\r\n        },\r\n        actions: {\r\n            display: \"flex\"\r\n        }\r\n    });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n    name: string;\r\n    styleProps: any;\r\n    onClick: any;\r\n}\r\n\r\ntype State = {\r\n    expanded: boolean;\r\n};\r\n\r\nclass StyleCard extends React.Component<Props, State> {\r\n    state = {\r\n        expanded: false\r\n    };\r\n\r\n    handleExpandClick = () => {\r\n        this.setState((state: State) => ({ expanded: !state.expanded }));\r\n    };\r\n\r\n    render() {\r\n        const { classes, name, styleProps, onClick } = this.props;\r\n\r\n        // generate style overrides string from properties\r\n        let styleString = \"\";\r\n        for (const [key, value] of Object.entries(styleProps)) {\r\n            styleString = `${styleString} ${key}: ${value}, `;\r\n        }\r\n        // remove trailing comma and space\r\n        styleString = `${styleString.slice(0, -2)}`;\r\n\r\n        return (\r\n            <Card className={classes.card}>\r\n                <div className={classes.cardMainDiv}>\r\n                    <CardActionArea onClick={onClick}>\r\n                        <CardContent>\r\n                            <Typography\r\n                                className={classes.name}\r\n                                style={styleProps}>\r\n                                {name}\r\n                            </Typography>\r\n                            <Typography\r\n                                className={classes.properties}\r\n                                color=\"textSecondary\">\r\n                                {styleString}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <IconButton\r\n                        className={classNames(classes.expand, {\r\n                            [classes.expandOpen]: this.state.expanded\r\n                        })}\r\n                        onClick={this.handleExpandClick}>\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\r\n                    <CardContent>\r\n                        <Typography>Controls go here!</Typography>\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default withStyles(styles)(StyleCard);\r\n","import * as React from \"react\";\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\n// A theme with custom primary and secondary color.\r\n// It's optional.\r\nconst theme = createMuiTheme({\r\n    palette: {},\r\n    typography: {}\r\n});\r\n\r\nfunction withRoot<P>(Component: React.ComponentType<P>) {\r\n    function WithRoot(props: P) {\r\n        // MuiThemeProvider makes the theme available down the React tree\r\n        // thanks to React context.\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n                <CssBaseline />\r\n                <Component {...props} />\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n\r\n    return WithRoot;\r\n}\r\n\r\nexport default withRoot;\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport StyleCard from \"./components/StyleCard\";\r\nimport { applyStyle } from \"./scripts\";\r\n\r\nimport withRoot from \"./withRoot\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        const styleCards = [\r\n            {\r\n                name: \"normal\",\r\n                styleProps: { fontSize: 11, fontFamily: \"roboto\" }\r\n            },\r\n            {\r\n                name: \"header\",\r\n                styleProps: { fontSize: 24, fontFamily: \"roboto\" }\r\n            },\r\n            {\r\n                name: \"subheader\",\r\n                styleProps: { fontSize: 18, fontFamily: \"roboto\" }\r\n            },\r\n            {\r\n                name: \"bold\",\r\n                styleProps: {\r\n                    fontSize: 11,\r\n                    fontFamily: \"roboto\",\r\n                    fontWeight: \"bold\"\r\n                }\r\n            },\r\n            {\r\n                name: \"italic\",\r\n                styleProps: {\r\n                    fontSize: 11,\r\n                    fontFamily: \"roboto\",\r\n                    fontStyle: \"italic\"\r\n                }\r\n            }\r\n        ];\r\n        const styleCardsJSX = styleCards.map(function(styleCard, index) {\r\n            return (\r\n                <StyleCard\r\n                    key={index}\r\n                    name={styleCard.name}\r\n                    styleProps={styleCard.styleProps}\r\n                    onClick={function() {\r\n                        return applyStyle(styleCard.styleProps);\r\n                    }}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-body\">{styleCardsJSX}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRoot(App);\r\n","export function applyStyle(style: any) {\r\n    Word.run(function(context) {\r\n        const doc = context.document;\r\n        let target = null;\r\n        const selectedRange: Word.Range = doc.getSelection();\r\n        selectedRange.load(\"isEmpty\");\r\n\r\n        return context\r\n            .sync()\r\n            .then(function() {\r\n                if (selectedRange.isEmpty) {\r\n                    const selectedParagraphs = selectedRange.paragraphs;\r\n                    const firstParagraph = selectedParagraphs.getFirst();\r\n                    target = firstParagraph;\r\n                } else {\r\n                    target = selectedRange;\r\n                }\r\n\r\n                target.font.set({\r\n                    name: style.fontFamily,\r\n                    size: style.fontSize\r\n                });\r\n            })\r\n            .then(context.sync);\r\n    }).catch(function(error) {\r\n        console.log(\"Error: \" + error);\r\n        if (error instanceof OfficeExtension.Error) {\r\n            console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\r\n        }\r\n    });\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nlet isOfficeInitialized = false;\r\n\r\nOffice.initialize = () => {\r\n    isOfficeInitialized = true;\r\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n};\r\n\r\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}