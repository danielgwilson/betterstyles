{"version":3,"sources":["components/StyleCard.tsx","withRoot.tsx","App.tsx","scripts.ts","serviceWorker.ts","index.tsx"],"names":["StyleCard","state","expanded","handleExpandClick","setState","this","props","classes","name","styleProps","onClick","styleString","Object","entries","key","value","slice","className","card","cardMainDiv","style","properties","color","classNames","expand","expandOpen","in","timeout","unmountOnExit","React","Component","withStyles","theme","createStyles","minWidth","marginBottom","display","bullet","margin","transform","title","fontSize","pos","stylePropsContainer","padding","fontFamily","top","transition","transitions","create","duration","shortest","breakpoints","up","marginRight","actions","createMuiTheme","palette","typography","withRoot","styleCardsJSX","fontWeight","fontStyle","map","styleCard","index","Word","run","context","doc","document","target","selectedRange","getSelection","load","sync","then","isEmpty","firstParagraph","paragraphs","getFirst","font","set","size","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","Boolean","window","location","hostname","match","Office","initialize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXA2EMA,E,2MACFC,MAAQ,CACJC,UAAU,G,EAGdC,kBAAoB,WAChB,EAAKC,UAAS,SAACH,GAAD,MAAmB,CAAEC,UAAWD,EAAMC,c,wEAQpD,IALM,IAAD,EAC0CG,KAAKC,MAA5CC,EADH,EACGA,QAASC,EADZ,EACYA,KAAMC,EADlB,EACkBA,WAAYC,EAD9B,EAC8BA,QAG/BC,EAAc,GAClB,MAA2BC,OAAOC,QAAQJ,GAA1C,eAAuD,CAAC,IAAD,0BAA3CK,EAA2C,KAAtCC,EAAsC,KACnDJ,EAAW,UAAMA,EAAN,YAAqBG,EAArB,aAA6BC,EAA7B,MAKf,OAFAJ,EAAW,UAAMA,EAAYK,MAAM,GAAI,IAGnC,kBAAC,IAAD,CAAMC,UAAWV,EAAQW,MACrB,yBAAKD,UAAWV,EAAQY,aACpB,kBAAC,IAAD,CAAgBT,QAASA,GACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIO,UAAWV,EAAQC,KACnBY,MAAOX,GACND,GAEL,kBAAC,IAAD,CACIS,UAAWV,EAAQc,WACnBC,MAAM,iBACLX,KAIb,kBAAC,IAAD,CACIM,UAAWM,IAAWhB,EAAQiB,OAAT,eAChBjB,EAAQkB,WAAapB,KAAKJ,MAAMC,WAErCQ,QAASL,KAAKF,mBACd,kBAAC,IAAD,QAGR,kBAAC,IAAD,CAAUuB,GAAIrB,KAAKJ,MAAMC,SAAUyB,QAAQ,OAAOC,eAAa,GAC3D,kBAAC,IAAD,KACI,kBAAC,IAAD,iC,GA/CAC,IAAMC,WAsDfC,wBAjHA,SAACC,GAAD,OACXC,uBAAa,CACTf,KAAM,CACFgB,SAAU,IACVC,aAAc,GAElBhB,YAAa,CACTiB,QAAS,QAEbC,OAAQ,CACJD,QAAS,eACTE,OAAQ,QACRC,UAAW,cAEfC,MAAO,CACHC,SAAU,IAEdC,IAAK,CACDP,aAAc,IAElBQ,oBAAqB,CACjBC,QAAS,qBAEbvB,WAAY,CACRoB,SAAU,IAEdjC,KAAM,CACFiC,SAAU,OACVI,WAAY,WAEhBrB,OAAO,aACHe,UAAW,eACXO,IAAK,MACLR,OAAQ,OACRS,WAAYf,EAAMgB,YAAYC,OAAO,YAAa,CAC9CC,SAAUlB,EAAMgB,YAAYE,SAASC,YAExCnB,EAAMoB,YAAYC,GAAG,MAAQ,CAC1BC,aAAc,IAGtB7B,WAAY,CACRc,UAAW,kBAEfgB,QAAS,CACLnB,QAAS,YAoENL,CAAmB/B,G,qBC3H5BgC,EAAQwB,yBAAe,CACzBC,QAAS,GACTC,WAAY,KAmBDC,ICgCAA,EDhDf,SAAqB7B,GAajB,OAZA,SAAkBxB,GAGd,OACI,gBAAC,mBAAD,CAAkB0B,MAAOA,GAErB,gBAAC,IAAD,MACA,gBAACF,EAAcxB,KCwChBqD,C,iLAlDX,IA8BMC,EA9Ba,CACjB,CACEpD,KAAM,SACNC,WAAY,CAAEgC,SAAU,GAAII,WAAY,WAE1C,CACErC,KAAM,SACNC,WAAY,CAAEgC,SAAU,GAAII,WAAY,WAE1C,CACErC,KAAM,YACNC,WAAY,CAAEgC,SAAU,GAAII,WAAY,WAE1C,CACErC,KAAM,OACNC,WAAY,CACVgC,SAAU,GACVI,WAAY,SACZgB,WAAY,SAGhB,CACErD,KAAM,SACNC,WAAY,CACVgC,SAAU,GACVI,WAAY,SACZiB,UAAW,YAIgBC,KAAI,SAASC,EAAWC,GACvD,OACE,kBAAC,EAAD,CACEnD,IAAKmD,EACLzD,KAAMwD,EAAUxD,KAChBC,WAAYuD,EAAUvD,WACtBC,QAAS,WACP,OC9CeU,ED8CG4C,EAAUvD,gBC7CpCyD,KAAKC,KAAI,SAASC,GACd,IAAMC,EAAMD,EAAQE,SAChBC,EAAS,KACPC,EAA4BH,EAAII,eAGtC,OAFAD,EAAcE,KAAK,WAEZN,EACFO,OACAC,MAAK,WACF,GAAIJ,EAAcK,QAAS,CACvB,IACMC,EADqBN,EAAcO,WACCC,WAC1CT,EAASO,OAETP,EAASC,EAGbD,EAAOU,KAAKC,IAAI,CACZ1E,KAAMY,EAAMyB,WACZsC,KAAM/D,EAAMqB,cAGnBmC,KAAKR,EAAQO,SACnBS,OAAM,SAASC,GACdC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,gBAAgBC,OACjCH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eA3BvD,IAAoBxE,QDmDvB,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,YAAY2C,Q,GA9CjB9B,cEKE+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,OAAOC,WAAa,WAClBC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,UDkI7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.f8d2b8fb.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Theme, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport \"typeface-roboto\";\n\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    Collapse,\n    IconButton,\n    Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        card: {\n            minWidth: 275,\n            marginBottom: 8\n        },\n        cardMainDiv: {\n            display: \"flex\"\n        },\n        bullet: {\n            display: \"inline-block\",\n            margin: \"0 2px\",\n            transform: \"scale(0.8)\"\n        },\n        title: {\n            fontSize: 14\n        },\n        pos: {\n            marginBottom: 12\n        },\n        stylePropsContainer: {\n            padding: \"12px 8px 8px 12px\"\n        },\n        properties: {\n            fontSize: 10\n        },\n        name: {\n            fontSize: \"11pt\",\n            fontFamily: \"Calibri\"\n        },\n        expand: {\n            transform: \"rotate(0deg)\",\n            top: \"50%\",\n            margin: \"auto\",\n            transition: theme.transitions.create(\"transform\", {\n                duration: theme.transitions.duration.shortest\n            }),\n            [theme.breakpoints.up(\"sm\")]: {\n                marginRight: -8\n            }\n        },\n        expandOpen: {\n            transform: \"rotate(180deg)\"\n        },\n        actions: {\n            display: \"flex\"\n        }\n    });\n\ninterface Props extends WithStyles<typeof styles> {\n    name: string;\n    styleProps: any;\n    onClick: any;\n}\n\ntype State = {\n    expanded: boolean;\n};\n\nclass StyleCard extends React.Component<Props, State> {\n    state = {\n        expanded: false\n    };\n\n    handleExpandClick = () => {\n        this.setState((state: State) => ({ expanded: !state.expanded }));\n    };\n\n    render() {\n        const { classes, name, styleProps, onClick } = this.props;\n\n        // generate style overrides string from properties\n        let styleString = \"\";\n        for (const [key, value] of Object.entries(styleProps)) {\n            styleString = `${styleString} ${key}: ${value}, `;\n        }\n        // remove trailing comma and space\n        styleString = `${styleString.slice(0, -2)}`;\n\n        return (\n            <Card className={classes.card}>\n                <div className={classes.cardMainDiv}>\n                    <CardActionArea onClick={onClick}>\n                        <CardContent>\n                            <Typography\n                                className={classes.name}\n                                style={styleProps}>\n                                {name}\n                            </Typography>\n                            <Typography\n                                className={classes.properties}\n                                color=\"textSecondary\">\n                                {styleString}\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <IconButton\n                        className={classNames(classes.expand, {\n                            [classes.expandOpen]: this.state.expanded\n                        })}\n                        onClick={this.handleExpandClick}>\n                        <ExpandMoreIcon />\n                    </IconButton>\n                </div>\n                <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\n                    <CardContent>\n                        <Typography>Controls go here!</Typography>\n                    </CardContent>\n                </Collapse>\n            </Card>\n        );\n    }\n}\nexport default withStyles(styles)(StyleCard);\n","import * as React from \"react\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n    palette: {},\n    typography: {}\n});\n\nfunction withRoot<P>(Component: React.ComponentType<P>) {\n    function WithRoot(props: P) {\n        // MuiThemeProvider makes the theme available down the React tree\n        // thanks to React context.\n        return (\n            <MuiThemeProvider theme={theme}>\n                {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n                <CssBaseline />\n                <Component {...props} />\n            </MuiThemeProvider>\n        );\n    }\n\n    return WithRoot;\n}\n\nexport default withRoot;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport StyleCard from \"./components/StyleCard\";\nimport { applyStyle } from \"./scripts\";\n\nimport withRoot from \"./withRoot\";\n\nclass App extends Component {\n  render() {\n    const styleCards = [\n      {\n        name: \"normal\",\n        styleProps: { fontSize: 11, fontFamily: \"roboto\" }\n      },\n      {\n        name: \"header\",\n        styleProps: { fontSize: 24, fontFamily: \"roboto\" }\n      },\n      {\n        name: \"subheader\",\n        styleProps: { fontSize: 18, fontFamily: \"roboto\" }\n      },\n      {\n        name: \"bold\",\n        styleProps: {\n          fontSize: 11,\n          fontFamily: \"roboto\",\n          fontWeight: \"bold\"\n        }\n      },\n      {\n        name: \"italic\",\n        styleProps: {\n          fontSize: 11,\n          fontFamily: \"roboto\",\n          fontStyle: \"italic\"\n        }\n      }\n    ];\n    const styleCardsJSX = styleCards.map(function(styleCard, index) {\n      return (\n        <StyleCard\n          key={index}\n          name={styleCard.name}\n          styleProps={styleCard.styleProps}\n          onClick={function() {\n            return applyStyle(styleCard.styleProps);\n          }}\n        />\n      );\n    });\n    return (\n      <div className=\"App\">\n        <div className=\"App-body\">{styleCardsJSX}</div>\n      </div>\n    );\n  }\n}\n\nexport default withRoot(App);\n","export function applyStyle(style: any) {\n    Word.run(function(context) {\n        const doc = context.document;\n        let target = null;\n        const selectedRange: Word.Range = doc.getSelection();\n        selectedRange.load(\"isEmpty\");\n\n        return context\n            .sync()\n            .then(function() {\n                if (selectedRange.isEmpty) {\n                    const selectedParagraphs = selectedRange.paragraphs;\n                    const firstParagraph = selectedParagraphs.getFirst();\n                    target = firstParagraph;\n                } else {\n                    target = selectedRange;\n                }\n\n                target.font.set({\n                    name: style.fontFamily,\n                    size: style.fontSize\n                });\n            })\n            .then(context.sync);\n    }).catch(function(error) {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n            console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n    });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nOffice.initialize = () => {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}