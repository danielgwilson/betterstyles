{"version":3,"sources":["components/StyleCard.tsx","App.tsx","scripts.ts","serviceWorker.ts","index.tsx"],"names":["styles","createStyles","card","minWidth","marginBottom","cardMainDiv","display","bullet","margin","transform","title","fontSize","pos","stylePropsContainer","padding","properties","name","fontFamily","expand","top","expandOpen","actions","StyleCard","state","expanded","handleExpandClick","_this","setState","_this$props","this","props","classes","styleProps","onClick","styleString","_arr","Object","entries","_i","length","_ref3","_ref2","slicedToArray","key","value","concat","slice","react_default","a","createElement","Card_default","className","CardActionArea_default","CardContent_default","Typography_default","style","color","IconButton_default","classNames","defineProperty","ExpandMore_default","index_es","in","timeout","unmountOnExit","React","Component","withStyles","App","styleCardsJSX","fontWeight","fontStyle","map","styleCard","index","components_StyleCard","Word","run","context","selectedRange","document","getSelection","paragraphs","font","set","size","sync","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","Boolean","window","location","hostname","match","Office","initialize","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62091ab1.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport classNames from \"classnames\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport { Collapse } from \"@material-ui/core\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport IconButton from \"@material-ui/core/IconButton\";\n// import Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"typeface-roboto\";\n\nconst styles = createStyles({\n    card: {\n        minWidth: 275,\n        marginBottom: 8\n    },\n    cardMainDiv: {\n        display: \"flex\"\n    },\n    bullet: {\n        display: \"inline-block\",\n        margin: \"0 2px\",\n        transform: \"scale(0.8)\"\n    },\n    title: {\n        fontSize: 14\n    },\n    pos: {\n        marginBottom: 12\n    },\n    stylePropsContainer: {\n        padding: \"12px 8px 8px 12px\"\n    },\n    properties: {\n        fontSize: 10\n    },\n    name: {\n        fontSize: \"11pt\",\n        fontFamily: \"Calibri\"\n    },\n    expand: {\n        transform: \"rotate(0deg)\",\n        top: \"50%\",\n        margin: \"auto\"\n    },\n    expandOpen: {\n        transform: \"rotate(180deg)\"\n    },\n    actions: {\n        display: \"flex\"\n    }\n});\n\ninterface Props extends WithStyles<typeof styles> {\n    name: string;\n    styleProps: any;\n    onClick: any;\n}\n\ntype State = {\n    expanded: boolean;\n};\n\nclass StyleCard extends React.Component<Props, State> {\n    state = {\n        expanded: false\n    };\n\n    handleExpandClick = () => {\n        this.setState((state: State) => ({ expanded: !state.expanded }));\n    };\n\n    render() {\n        const { classes, name, styleProps, onClick } = this.props;\n\n        // generate style overrides string from properties\n        let styleString = \"\";\n        for (const [key, value] of Object.entries(styleProps)) {\n            styleString = `${styleString} ${key}: ${value}, `;\n        }\n        // remove trailing comma and space\n        styleString = `${styleString.slice(0, -2)}`;\n\n        return (\n            <Card className={classes.card}>\n                <div className={classes.cardMainDiv}>\n                    <CardActionArea onClick={onClick}>\n                        <CardContent>\n                            <Typography\n                                className={classes.name}\n                                style={styleProps}>\n                                {name}\n                            </Typography>\n                            <Typography\n                                className={classes.properties}\n                                color=\"textSecondary\">\n                                {styleString}\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                    <IconButton\n                        className={classNames(classes.expand, {\n                            [classes.expandOpen]: this.state.expanded\n                        })}\n                        onClick={this.handleExpandClick}>\n                        <ExpandMoreIcon />\n                    </IconButton>\n                </div>\n                <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\n                    <CardContent>\n                        <Typography>Controls go here!</Typography>\n                    </CardContent>\n                </Collapse>\n            </Card>\n        );\n    }\n}\nexport default withStyles(styles)(StyleCard);\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport StyleCard from \"./components/StyleCard\";\nimport { applyStyle } from \"./scripts\";\n\nclass App extends Component {\n    render() {\n        const styleCards = [\n            {\n                name: \"normal\",\n                styleProps: { fontSize: 11, fontFamily: \"roboto\" }\n            },\n            {\n                name: \"header\",\n                styleProps: { fontSize: 24, fontFamily: \"roboto\" }\n            },\n            {\n                name: \"subheader\",\n                styleProps: { fontSize: 18, fontFamily: \"roboto\" }\n            },\n            {\n                name: \"bold\",\n                styleProps: {\n                    fontSize: 11,\n                    fontFamily: \"roboto\",\n                    fontWeight: \"bold\"\n                }\n            },\n            {\n                name: \"italic\",\n                styleProps: {\n                    fontSize: 11,\n                    fontFamily: \"roboto\",\n                    fontStyle: \"italic\"\n                }\n            }\n        ];\n        const styleCardsJSX = styleCards.map(function(styleCard, index) {\n            return (\n                <StyleCard\n                    key={index}\n                    name={styleCard.name}\n                    styleProps={styleCard.styleProps}\n                    onClick={function() {\n                        return applyStyle(styleCard.styleProps);\n                    }}\n                />\n            );\n        });\n        return (\n            <div className=\"App\">\n                <div className=\"App-body\">{styleCardsJSX}</div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","export function applyStyle(style: any) {\n    Word.run(function(context) {\n        const doc = context.document;\n        let selectedRange: any = doc.getSelection();\n        const selectedParagraphs = selectedRange.paragraphs;\n\n        // if (selectedParagraphs.items.length == 1) {\n        //     selectedRange = selectedParagraphs.getFirst();\n        // }\n\n        selectedRange.font.set({\n            name: style.fontFamily,\n            size: style.fontSize\n        });\n\n        return context.sync();\n    }).catch(function(error) {\n        console.log(\"Error: \" + error);\n        if (error instanceof OfficeExtension.Error) {\n            console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n        }\n    });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlet isOfficeInitialized = false;\n\nOffice.initialize = () => {\n    isOfficeInitialized = true;\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}